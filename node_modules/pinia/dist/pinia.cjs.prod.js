/*!
  * pinia v2.0.0-alpha.7
  * (c) 2021 Eduardo San Martin Morote
  * @license MIT
  */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');

const IS_CLIENT = typeof window !== 'undefined';

/**
 * setActivePinia must be called to handle SSR at the top of functions like
 * `fetch`, `setup`, `serverPrefetch` and others
 */
let activePinia;
/**
 * Sets or unsets the active pinia. Used in SSR and internally when calling
 * actions and getters
 *
 * @param pinia - Pinia instance
 */
const setActivePinia = (pinia) => (activePinia = pinia);
/**
 * Get the currently active pinia
 */
const getActivePinia = () => {
    return activePinia;
};
/**
 * The api needs more work we must be able to use the store easily in any
 * function by calling `useStore` to get the store Instance and we also need to
 * be able to reset the store instance between applications on the server
 */
const storesMap = new WeakMap();
const piniaSymbol = ( Symbol());
/**
 * Creates a Pinia instance to be used by the application
 */
function createPinia() {
    // NOTE: here we could check the window object for a state and directly set it
    // if there is anything like it with Vue 3 SSR
    const state = vue.ref({});
    let localApp;
    let _p = [];
    // plugins added before calling app.use(pinia)
    const toBeInstalled = [];
    const pinia = {
        install(app) {
            localApp = app;
            // pinia._a = app
            app.provide(piniaSymbol, pinia);
            app.config.globalProperties.$pinia = pinia;
            toBeInstalled.forEach((plugin) => _p.push(plugin.bind(null, localApp)));
        },
        use(plugin) {
            if (!localApp) {
                toBeInstalled.push(plugin);
            }
            else {
                _p.push(plugin.bind(null, localApp));
            }
        },
        _p,
        state,
    };
    return pinia;
}

function isPlainObject(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
o) {
    return (o &&
        typeof o === 'object' &&
        Object.prototype.toString.call(o) === '[object Object]' &&
        typeof o.toJSON !== 'function');
}

function innerPatch(target, patchToApply) {
    // TODO: get all keys like symbols as well
    for (const key in patchToApply) {
        const subPatch = patchToApply[key];
        const targetValue = target[key];
        if (isPlainObject(targetValue) && isPlainObject(subPatch)) {
            target[key] = innerPatch(targetValue, subPatch);
        }
        else {
            // @ts-ignore
            target[key] = subPatch;
        }
    }
    return target;
}
/**
 * Create an object of computed properties referring to
 *
 * @param rootStateRef - pinia.state
 * @param id - unique name
 */
function computedFromState(rootStateRef, id) {
    // let asComputed = computed<T>()
    const reactiveObject = {};
    const state = rootStateRef.value[id];
    for (const key in state) {
        // @ts-ignore: the key matches
        reactiveObject[key] = vue.computed({
            get: () => rootStateRef.value[id][key],
            set: (value) => (rootStateRef.value[id][key] = value),
        });
    }
    return reactiveObject;
}
/**
 * Creates a store with its state object. This is meant to be augmented with getters and actions
 *
 * @param id - unique identifier of the store, like a name. eg: main, cart, user
 * @param buildState - function to build the initial state
 * @param initialState - initial state applied to the store, Must be correctly typed to infer typings
 */
function initStore($id, buildState = () => ({}), initialState) {
    const _p = getActivePinia();
    _p.state.value[$id] = initialState || buildState();
    // const state: Ref<S> = toRef(_p.state.value, $id)
    let isListening = true;
    let subscriptions = [];
    function $patch(partialState) {
        isListening = false;
        innerPatch(_p.state.value[$id], partialState);
        isListening = true;
        // because we paused the watcher, we need to manually call the subscriptions
        subscriptions.forEach((callback) => {
            callback({ storeName: $id, type: '‚§µÔ∏è patch', payload: partialState }, _p.state.value[$id]);
        });
    }
    function $subscribe(callback) {
        subscriptions.push(callback);
        // watch here to link the subscription to the current active instance
        // e.g. inside the setup of a component
        const stopWatcher = vue.watch(() => _p.state.value[$id], (state) => {
            if (isListening) {
                subscriptions.forEach((callback) => {
                    callback({ storeName: $id, type: 'üß© in place', payload: {} }, state);
                });
            }
        }, {
            deep: true,
            flush: 'sync',
        });
        return () => {
            const idx = subscriptions.indexOf(callback);
            if (idx > -1) {
                subscriptions.splice(idx, 1);
                stopWatcher();
            }
        };
    }
    function $reset() {
        subscriptions = [];
        _p.state.value[$id] = buildState();
    }
    const storeWithState = {
        $id,
        _p,
        // $state is added underneath
        $patch,
        $subscribe,
        $reset,
    };
    return [
        storeWithState,
        {
            get: () => _p.state.value[$id],
            set: (newState) => {
                isListening = false;
                _p.state.value[$id] = newState;
                isListening = true;
            },
        },
    ];
}
/**
 * Creates a store bound to the lifespan of where the function is called. This
 * means creating the store inside of a component's setup will bound it to the
 * lifespan of that component while creating it outside of a component will
 * create an ever living store
 *
 * @param partialStore - store with state returned by initStore
 * @param descriptor - descriptor to setup $state property
 * @param $id - unique name of the store
 * @param getters - getters of the store
 * @param actions - actions of the store
 */
function buildStoreToUse(partialStore, descriptor, $id, getters = {}, actions = {}) {
    const _p = getActivePinia();
    const computedGetters = {};
    for (const getterName in getters) {
        computedGetters[getterName] = vue.computed(() => {
            setActivePinia(_p);
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            return getters[getterName].call(store, store);
        });
    }
    const wrappedActions = {};
    for (const actionName in actions) {
        wrappedActions[actionName] = function () {
            setActivePinia(_p);
            // eslint-disable-next-line
            return actions[actionName].apply(store, arguments);
        };
    }
    const extensions = _p._p.reduce((extended, extender) => ({
        ...extended,
        ...extender(),
    }), {});
    const store = vue.reactive({
        ...extensions,
        ...partialStore,
        // using this means no new properties can be added as state
        ...computedFromState(_p.state, $id),
        ...computedGetters,
        ...wrappedActions,
    });
    // use this instead of a computed with setter to be able to create it anywhere
    // without linking the computed lifespan to wherever the store is first
    // created.
    Object.defineProperty(store, '$state', descriptor);
    return store;
}
// only warn the dev once
let isDevWarned;
/**
 * Creates a `useStore` function that retrieves the store instance
 * @param options - options to define the store
 */
function defineStore(options) {
    const { id, state, getters, actions } = options;
    return function useStore(pinia) {
        // avoid injecting if `useStore` when not possible
        pinia = pinia || (vue.getCurrentInstance() && vue.inject(piniaSymbol));
        if (pinia)
            setActivePinia(pinia);
        // TODO: worth warning on server if no piniaKey as it can leak data
        pinia = getActivePinia();
        let stores = storesMap.get(pinia);
        if (!stores)
            storesMap.set(pinia, (stores = new Map()));
        let storeAndDescriptor = stores.get(id);
        if (!storeAndDescriptor) {
            storeAndDescriptor = initStore(id, state, pinia.state.value[id]);
            stores.set(id, storeAndDescriptor);
            const store = buildStoreToUse(storeAndDescriptor[0], storeAndDescriptor[1], id, getters, actions);
            if (IS_CLIENT &&
                false &&
                false /*|| __FEATURE_PROD_DEVTOOLS__*/) {
                if (!isDevWarned && !false) {
                    isDevWarned = true;
                    console.warn(`[üçç]: store was instantiated before calling\n` +
                        `app.use(pinia)\n` +
                        `Make sure to install pinia's plugin by using createPinia:\n` +
                        `https://github.com/posva/pinia/tree/v2#install-the-plugin\n` +
                        `It will enable devtools and overall a better developer experience.`);
                }
            }
            return store;
        }
        return buildStoreToUse(storeAndDescriptor[0], storeAndDescriptor[1], id, getters, actions);
    };
}

/**
 * {@inheritDoc defineStore}
 * @deprecated Use {@link defineStore}
 */
const createStore = ((options) => {
    console.warn('[üçç]: "createStore" has been deprecated and will be removed on the sable release, use "defineStore" instead.');
    return defineStore(options);
});

exports.createPinia = createPinia;
exports.createStore = createStore;
exports.defineStore = defineStore;
exports.setActivePinia = setActivePinia;
